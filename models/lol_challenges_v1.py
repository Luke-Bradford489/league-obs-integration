# generated by datamodel-codegen:
#   filename:  riot_open_api.json
#   timestamp: 2024-10-17T17:34:07+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class State(Enum):
    DISABLED = 'DISABLED'
    HIDDEN = 'HIDDEN'
    ENABLED = 'ENABLED'
    ARCHIVED = 'ARCHIVED'


class Tracking(Enum):
    LIFETIME = 'LIFETIME'
    SEASON = 'SEASON'


class ChallengeConfigInfoDto(BaseModel):
    id: int
    localizedNames: Dict[str, Dict[str, str]]
    state: State = Field(
        ...,
        description='DISABLED - not visible and not calculated, HIDDEN - not visible, but calculated, ENABLED - visible and calculated, ARCHIVED - visible, but not calculated',
    )
    tracking: Optional[Tracking] = Field(
        None,
        description='LIFETIME - stats are incremented without reset, SEASON - stats are accumulated by season and reset at the beginning of new season',
    )
    startTimestamp: Optional[int] = None
    endTimestamp: Optional[int] = None
    leaderboard: bool
    thresholds: Dict[str, float]


class StateModel(BaseModel):
    pass


class TrackingModel(BaseModel):
    pass


class ApexPlayerInfoDto(BaseModel):
    puuid: str
    value: float
    position: int


class Level(BaseModel):
    pass


class ChallengeInfo(BaseModel):
    challengeId: int
    percentile: float
    level: str
    value: float
    achievedTime: Optional[int] = None
    position: Optional[int] = None
    playersInLevel: Optional[int] = None


class PlayerClientPreferences(BaseModel):
    bannerAccent: Optional[str] = None
    title: Optional[str] = None
    challengeIds: Optional[List[int]] = None
    crestBorder: Optional[str] = None
    prestigeCrestBorderLevel: Optional[int] = None


class ChallengePoints(BaseModel):
    level: str
    current: int
    max: int
    percentile: Optional[float] = None


class PlayerInfoDto(BaseModel):
    challenges: List[ChallengeInfo]
    preferences: PlayerClientPreferences
    totalPoints: ChallengePoints
    categoryPoints: Dict[str, ChallengePoints]
