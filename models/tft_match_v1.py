# generated by datamodel-codegen:
#   filename:  riot_open_api.json
#   timestamp: 2024-10-17T17:34:07+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field


class MetadataDto(BaseModel):
    data_version: str = Field(..., description='Match data version.')
    match_id: str = Field(..., description='Match id.')
    participants: List[str] = Field(..., description='A list of participant PUUIDs.')


class TraitDto(BaseModel):
    name: str = Field(..., description='Trait name.')
    num_units: int = Field(..., description='Number of units with this trait.')
    style: Optional[int] = Field(
        None,
        description='Current style for this trait. (0 = No style, 1 = Bronze, 2 = Silver, 3 = Gold, 4 = Chromatic)',
    )
    tier_current: int = Field(..., description='Current active tier for the trait.')
    tier_total: Optional[int] = Field(None, description='Total tiers for the trait.')


class UnitDto(BaseModel):
    items: Optional[List[int]] = Field(
        None,
        description="A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids.",
    )
    character_id: str = Field(
        ..., description='This field was introduced in patch 9.22 with data_version 2.'
    )
    chosen: Optional[str] = Field(
        None,
        description='If a unit is chosen as part of the Fates set mechanic, the chosen trait will be indicated by this field. Otherwise this field is excluded from the response.',
    )
    name: str = Field(..., description='Unit name. This field is often left blank.')
    rarity: int = Field(
        ..., description="Unit rarity. This doesn't equate to the unit cost."
    )
    tier: int = Field(..., description='Unit tier.')
    itemNames: Optional[List[str]] = None


class CompanionDto(BaseModel):
    item_ID: Optional[int] = None
    skin_ID: int
    content_ID: str
    species: str


class ParticipantMissionsDto(BaseModel):
    Assists: Optional[int] = None
    DamageDealt: Optional[int] = None
    DamageDealtToObjectives: Optional[int] = None
    DamageDealtToTurrets: Optional[int] = None
    DamageTaken: Optional[int] = None
    DoubleKills: Optional[int] = None
    GoldEarned: Optional[int] = None
    GoldSpent: Optional[int] = None
    InhibitorsDestroyed: Optional[int] = None
    Kills: Optional[int] = None
    LargestKillingSpree: Optional[int] = None
    LargestMultiKill: Optional[int] = None
    MagicDamageDealt: Optional[int] = None
    MagicDamageDealtToChampions: Optional[int] = None
    NeutralMinionsKilledTeamJungle: Optional[int] = None
    PhysicalDamageDealt: Optional[int] = None
    PhysicalDamageTaken: Optional[int] = None
    PlayerScore0: Optional[int] = None
    PlayerScore1: Optional[int] = None
    PlayerScore2: Optional[int] = None
    PlayerScore3: Optional[int] = None
    PlayerScore4: Optional[int] = None
    PlayerScore5: Optional[int] = None
    PlayerScore6: Optional[int] = None
    PlayerScore9: Optional[int] = None
    PlayerScore10: Optional[int] = None
    PlayerScore11: Optional[int] = None
    QuadraKills: Optional[int] = None
    Spell1Casts: Optional[int] = None
    Spell2Casts: Optional[int] = None
    Spell3Casts: Optional[int] = None
    Spell4Casts: Optional[int] = None
    SummonerSpell1Casts: Optional[int] = None
    TimeCCOthers: Optional[int] = None
    TotalMinionsKilled: Optional[int] = None
    TrueDamageDealtToChampions: Optional[int] = None
    UnrealKills: Optional[int] = None
    VisionScore: Optional[int] = None
    WardsKilled: Optional[int] = None
    Deaths: Optional[int] = None
    KillingSprees: Optional[int] = None
    MagicDamageTaken: Optional[int] = None
    PentaKills: Optional[int] = None
    PhysicalDamageDealtToChampions: Optional[int] = None
    TotalDamageDealtToChampions: Optional[int] = None
    TripleKills: Optional[int] = None
    TrueDamageDealt: Optional[int] = None
    TrueDamageTaken: Optional[int] = None


class ParticipantDto(BaseModel):
    companion: CompanionDto = Field(..., description="Participant's companion.")
    gold_left: int = Field(
        ..., description='Gold left after participant was eliminated.'
    )
    last_round: int = Field(
        ...,
        description='The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.',
    )
    level: int = Field(
        ...,
        description='Participant Little Legend level. Note: This is not the number of active units.',
    )
    placement: int = Field(..., description='Participant placement upon elimination.')
    players_eliminated: int = Field(
        ..., description='Number of players the participant eliminated.'
    )
    puuid: str
    riotIdGameName: str
    riotIdTagline: str
    time_eliminated: float = Field(
        ..., description='The number of seconds before the participant was eliminated.'
    )
    total_damage_to_players: int = Field(
        ..., description='Damage the participant dealt to other players.'
    )
    traits: List[TraitDto] = Field(
        ..., description="A complete list of traits for the participant's active units."
    )
    units: List[UnitDto] = Field(
        ..., description='A list of active units for the participant.'
    )
    augments: Optional[List[str]] = None
    partner_group_id: Optional[int] = None
    missions: Optional[ParticipantMissionsDto] = None


class InfoDto(BaseModel):
    game_datetime: int = Field(..., description='Unix timestamp.')
    game_length: float = Field(..., description='Game length in seconds.')
    game_variation: Optional[str] = Field(
        None,
        description='Game variation key. Game variations documented in TFT static data.',
    )
    game_version: str = Field(..., description='Game client version.')
    participants: List[ParticipantDto]
    queue_id: int = Field(
        ..., description='Please refer to the League of Legends documentation.'
    )
    tft_set_number: int = Field(..., description='Teamfight Tactics set number.')
    tft_game_type: Optional[str] = None
    tft_set_core_name: Optional[str] = None
    endOfGameResult: Optional[str] = None
    gameCreation: Optional[int] = None
    gameId: Optional[int] = None
    mapId: Optional[int] = None
    queueId: Optional[int] = Field(
        None, description='Please refer to the League of Legends documentation.'
    )


class MatchDto(BaseModel):
    metadata: MetadataDto = Field(..., description='Match metadata.')
    info: InfoDto = Field(..., description='Match info.')
